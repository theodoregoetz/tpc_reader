import os

from waflib.Task import Task
from waflib.Build import BuildContext

class RootDict(Task):
    run_str = 'rootcint -f ${TGT[0].relpath()} -c ${SRC[0].abspath()} ${SRC[1].abspath()}'
    color = 'BLUE'

    @staticmethod
    def new(bld,**kwargs):
        task = RootDict(env=bld.env, cwd=bld.path.get_bld())
        task.set_inputs([bld.path.find_resource(s) for s in kwargs['source']])
        task.set_outputs([bld.path.find_or_declare(t) for t in kwargs['target']])
        bld.add_to_group(task)
        return task

BuildContext.root_dict = RootDict.new


class BoostDecompress(Task):
    color = 'BLUE'
    def run(self):
        bld = self.generator.bld
        fname = self.inputs[0].abspath()
        outdir = os.path.join(bld.out_dir,'ext')
        try:
            import tarfile
            tar = tarfile.open(fname)
            tar.extractall(path=outdir)
            tar.close()
        except ImportError:
            if not os.path.exists(outdir):
                os.makedirs(outdir)
            cmd = 'tar -zxvf {0} -C {1}'.format(fname,outdir)
            return self.exec_command(cmd)

    @staticmethod
    def new(bld,**kwargs):
        wd = kwargs.get('cwd',bld.path.get_bld())
        task = BoostDecompress(env=bld.env, cwd=wd)
        task.set_inputs([bld.path.find_resource(s) for s in kwargs['source']])
        task.set_outputs([bld.path.find_or_declare(t) for t in kwargs['target']])
        bld.add_to_group(task)
        return task

BuildContext.boost_decompress = BoostDecompress.new

class BoostBootstrap(Task):
    color = 'BLUE'
    def run(self):
        abspath = self.inputs[0].abspath()
        wd,cmd = os.path.split(abspath)
        return self.exec_command('./'+cmd, cwd=wd, stdout=None, stderr=None)

    @staticmethod
    def new(bld,**kwargs):
        wd = kwargs.get('cwd',bld.path.get_bld())
        task = BoostBootstrap(env=bld.env, cwd=wd)
        task.set_inputs([bld.path.find_resource(s) for s in kwargs['source']])
        task.set_outputs([bld.path.find_or_declare(t) for t in kwargs['target']])
        bld.add_to_group(task)
        return task

BuildContext.boost_bootstrap = BoostBootstrap.new

class BoostBuild(Task):
    color = 'BLUE'
    def run(self):
        opts = self.generator.bld.options
        abspath = self.inputs[0].abspath()
        wd,cmd = os.path.split(abspath)
        jobs = max(1,opts.jobs-1)
        cmd += ' -j{0} --layout=system link=static'.format(jobs,)
        return self.exec_command('./'+cmd, cwd=wd, stdout=None, stderr=None)

    @staticmethod
    def new(bld,**kwargs):
        wd = kwargs.get('cwd',bld.path.get_bld())
        task = BoostBuild(env=bld.env, cwd=wd)
        task.set_inputs([bld.path.find_resource(s) for s in kwargs['source']])
        task.set_outputs([bld.path.find_or_declare(t) for t in kwargs['target']])
        bld.add_to_group(task)
        return task

BuildContext.boost_build = BoostBuild.new


def options(opt):
    # for System-Installed Boost libraries
    # see related comment block in configure()
    """
    opt.load('boost')
    """

def configure(conf):
    boost_libs = '''\
        filesystem
        system
        log
        thread
        date_time
        program_options
        unit_test_framework
    '''.split()
    conf.env['BOOST_LIBS'] = ['boost_'+l for l in boost_libs]

    conf.env.INCLUDES_BOOST = ['#ext/boost']
    conf.env.STLIBPATH_BOOST = ['ext/boost/stage/lib']

    for l in conf.env['BOOST_LIBS']:
        conf.env['STLIB_'+l] = [l]

    conf.env['STLIB_boost_log'] += '''\
        boost_date_time
        boost_filesystem
        boost_system
        boost_thread
        '''.split()
    conf.env['STLIB_boost_filesystem'] += ['boost_system']

    if not conf.options.debug:
        conf.env.append_unique('DEFINES_BOOST', ['NDEBUG'])


    """
    # System-Installed Boost Libraries
    # Using this may be faster for initial compilation,
    # but requires a rather narrow range of Boost versions
    # to be compatible with this source.

    conf.load('boost')
    conf.check_boost()

    boost_required_libs = '''
        program_options
        filesystem
        system
        log
        log_setup
        date_time
        chrono
        thread
    '''.split()

    for libname in boost_required_libs:
        libpath,lib = conf.boost_get_libs(libname)
        if libpath not in system_libpath:
            conf.env.append_unique('LIBPATH_BOOST',libpath)
        conf.env.append_unique('LIB_boost_'+libname, lib)
        conf.to_log('boost library found: {}'.format(libname))

    conf.env.append_unique('LIB_boost_log',
        ['boost_'+l for l in '''\
            log_setup
            filesystem
            system
            date_time
            chrono
            thread
        '''.split()])

    conf.env.append_unique('DEFINES_BOOST', ['BOOST_LOG_DYN_LINK'])

    ### OPTIONAL DEPENDENCIES

    boost_optional_libs = '''
        unit_test_framework
    '''.split()
    for libname in boost_optional_libs:
        try:
            libpath,lib = conf.boost_get_libs(libname)
            if libpath not in system_libpath:
                conf.env.append_unique('LIBPATH_BOOST',libpath)
            conf.env.append_unique('LIB_boost_'+libname, lib)
            conf.to_log('boost library found: {}'.format(libname))
        except conf.errors.ConfigurationError:
            conf.to_log('boost library not found: {}'.format(libname))

    """

def build(bld):

    bld.add_group('ext')
    bld.add_group('project')

    bld.set_group('ext')

    ptrn = bld.env['cxxstlib_PATTERN']
    libs = [ptrn % l for l in bld.env['BOOST_LIBS']]
    libpaths = [os.path.join('boost/stage/lib',l) for l in libs]

    bld.boost_decompress(
        target = ['boost/bootstrap.sh'],
        source = ['boost.tar.gz'])
    bld.boost_bootstrap(
        target = ['boost/b2'],
        source = ['boost/bootstrap.sh'],
        cwd = 'boost')
    bld.boost_build(
        target = libpaths,
        source = ['boost/b2'],
        cwd = 'boost')

    bld.set_group('project')
